reviewer,package,file_path,line_number,type,severity,description,false_positive,Justification (if needed)
Krishna Raju,sqlalchemy,test/orm/test_naturalpks.py,1138,Use of Hardcoded Credentials,Low,Do not hardcode credentials in code. Found�hardcoded�credential used in�user_name.,Yes,Appears in the test folder so data is not real its just a sample string trying to test functionality
Krishna Raju,sqlalchemy,test/orm/test_naturalpks.py,1328,Use of Hardcoded Credentials,Low,Do not hardcode credentials in code. Found�hardcoded�credential used in�user_name.,Yes,Appears in the test folder so data is not real its just a sample string trying to test functionality
Krishna Raju,sqlalchemy,lib/sqlalchemy/util/compat.py,108,Use of Password Hash With Insufficient Computational Effort,Low,hashlib.md5�is insecure. Consider changing it to a secure hashing algorithm.,No ,MD5 is not a secure hashing algorithm and must be replaced with a secure alternative in this implementation
Krishna Raju,sqlalchemy,test/orm/test_naturalpks.py,686,Use of Hardcoded Credentials,Low,Do not hardcode credentials in code. Found�hardcoded�credential used in�user_name.,Yes,Appears in the test folder so data is not real its just a sample string trying to test functionality
Krishna Raju,sqlalchemy,test/orm/test_naturalpks.py,1139,Use of Hardcoded Credentials,Low,Do not hardcode credentials in code. Found�hardcoded�credential used in�user_name.,Yes,Appears in the test folder so data is not real its just a sample string trying to test functionality
Krishna Raju,hibernate,hibernate-testing/src/main/java/org/hibernate/testing/cleaner/SQLServerDatabaseCleaner.java,86,SQL Injection,Low,"Unsanitized input from�a database�flows�into�execute, where it is used in an SQL query. This may result in an SQL Injection vulnerability.",No ,"The SQL statement here is running without any input validation mechanisms which can lead to SQL Injection, To fix this the SQL statements must be validated before attempting to execute them on the database"
Krishna Raju,hibernate,hibernate-testing/src/main/java/org/hibernate/testing/cleaner/SQLServerDatabaseCleaner.java,229,SQL Injection,Low,"Unsanitized input from�a database�flows�into�execute, where it is used in an SQL query. This may result in an SQL Injection vulnerability.",No ,The SQL statement here is being concatenated with a string without validating it to form the SQL string. Instead Input parametrization should be used to add parameters to the SQL statement.
Krishna Raju,hibernate,hibernate-core/src/test/java/org/hibernate/orm/test/dialect/functional/SQLServerDialectTempTableCollationTest.java,74,SQL Injection,Low,"Unsanitized input from�a database�flows�into�execute, where it is used in an SQL query. This may result in an SQL Injection vulnerability.",No ,The SQL statement here is being concatenated with a string without validating it to form the SQL string. Instead Input parametrization should be used to add parameters to the SQL statement.
Krishna Raju,hibernate,hibernate-core/src/test/java/org/hibernate/orm/test/fetching/FetchingTest.java,112,Use of Hardcoded Credentials,Low,Do not hardcode credentials in code.,Yes,"The Hard Coded credentials are not for a real user it is simply test data, having this data Hard coded does not impact security"
Krishna Raju,hibernate,hibernate-core/src/test/java/org/hibernate/orm/test/annotations/cid/CompositeIdTest.java,152,SQL Injection,Low,"Unsanitized input from�a database�flows�into�delete, where it is used in an SQL query. This may result in an SQL Injection vulnerability.",No ,"The SQL statement here is running without any input validation mechanisms which can lead to SQL Injection, To fix this the SQL statements must be validated before attempting to execute them on the database"
Krishna Raju,hibernate,hibernate-testing/src/main/java/org/hibernate/testing/cleaner/OracleDatabaseCleaner.java,245,SQL Injection,Low,"Unsanitized input from�a database�flows�into�execute, where it is used in an SQL query. This may result in an SQL Injection vulnerability.",No ,"The SQL statement here is running without any input validation mechanisms which can lead to SQL Injection, To fix this the SQL statements must be validated before attempting to execute them on the database"
Krishna Raju,hibernate,hibernate-testing/src/main/java/org/hibernate/testing/cleaner/OracleDatabaseCleaner.java,134,SQL Injection,Low,"Unsanitized input from�a database�flows�into�execute, where it is used in an SQL query. This may result in an SQL Injection vulnerability.",No ,"The SQL statement here is running without any input validation mechanisms which can lead to SQL Injection, To fix this the SQL statements must be validated before attempting to execute them on the database"
Krishna Raju,hibernate,hibernate-core/src/test/java/org/hibernate/orm/test/fetching/FetchingTest.java,130,Use of Hardcoded Credentials,Low,Do not hardcode credentials in code.,Yes,"The Hard Coded credentials are not for a real user it is simply test data, having this data Hard coded does not impact security"
Krishna Raju,ebean,ebean-postgis-types/pom.xml,56,LGPL-2.0 license,Medium,io.ebean:ebean-postgis-types@14.0.2 � net.postgis:postgis-jdbc@2.5.1 � net.postgis:postgis-geometry@2.5.1,Yes,A License issue is not a software bug
Krishna Raju,ebean,ebean-core/src/main/java/io/ebeaninternal/server/type/SimpleAesEncryptor.java,67,Use of a Broken or Risky Cryptographic Algorithm,Medium,The�CBC�mode used in�javax.crypto.Cipher.getInstance�does not provide integrity. Consided using Galois/Counter Mode.,No ,CBC mode of encryption does not offer sufficient entropy during the encryption process any patterns in the data will still be able to be deciphered from the encrypted data. Instead GCM or CTR mode should be used
Krishna Raju,ebean,ebean-postgis-types/pom.xml,6,"Dual License: EPL -1.0, MPL-2.0",Medium,io.ebean:ebean-redis@14.0.2 � io.ebean:ebean-core@14.0.2 � com.h2database:h2@2.2.220,Yes,A License issue is not a software bug
Krishna Raju,ponyorm,pony/orm/tests/fixtures.py,225,Use of Hardcoded Credentials,Low,Do not hardcode passwords in code. Found�hardcoded�password used in a dictionary key.,Yes,These are simply test credentials which do not pose a significant risk
Krishna Raju,openjpa,openjpa-examples/openbooks/web/query.jsp,91,Cross-Site Scripting (XSS),High,"Unsanitized input from an HTTP parameter flows into print, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS)",No ,"The HTTP parameter does not have input validation performed on it, This could allow for a cross site scripting attack to take place."
Krishna Raju,openjpa,openjpa-project/pom.xml,405,Information Exposure,Low,"Affected versions of this package are vulnerable to Information Exposure. If a�BasicDataSource�is created with�jmxName�set, the password property is exposed via�jmx�and is visible to anyone who is connected to jmx port.",Yes ,There is no known exploit for this information exposure
Krishna Raju,openjpa,openbooks/pom.xml,67,GPL-3.0 License,High,org.apache.openjpa.openjpa-examples:openbooks@4.0.1-SNAPSHOT � de.java2html:java2html@5.0,Yes,A License issue is not a software bug
Krishna Raju,openjpa,openjpa-tools/openjpa-fetch-statistics/pom.xml,63,EPL-1.0 License,Medium,org.apache.openjpa:openjpa-fetch-statistics@4.0.1-SNAPSHOT � junit:junit@4.13.2,Yes,A License issue is not a software bug
Krishna Raju,openjpa,openjpa-integration/jmx/pom.xml,51,Information Exposure,Low,"Affected versions of this package are vulnerable to Information Exposure. If a�BasicDataSource�is created with�jmxName�set, the password property is exposed via�jmx�and is visible to anyone who is connected to jmx port.",Yes,There is no known exploit for this information exposure
